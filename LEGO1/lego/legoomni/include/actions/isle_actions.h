// This file was automatically generated by the actionheadergen tool.
// Please do not manually edit this file.
#ifndef ISLE_ACTIONS_H
#define ISLE_ACTIONS_H

/// @file isle_actions.h [AI]
/// @brief [AI] Contains enums for compiled script/resource action IDs for LEGO Island's scripting engine.
/// @details [AI] This file enumerates all known SI (Script Instance) file and resource identifiers compiled into LEGO Island,
/// mapping human-friendly symbolic names to integer IDs used for dispatching actions, loading models, playing sounds, and 
/// controlling animation and interactivity throughout the game engine. The values are auto-generated and should be referenced
/// throughout the codebase when resource references are needed in code. Do not modify manually; regenerated when SI files change [AI].

namespace IsleScript
{
#if __cplusplus >= 201103L
/// @enum Script
/// @brief [AI] Enum listing all script and resource identifiers for the main IsleScript namespace.
/// @details [AI] Each entry represents a specific SI file, actor definition, model, animation, or sound resource
/// used throughout the game. Use these IDs to programmatically reference resources and scripts in the engine.
/// The enum is strongly typed when using C++11 and above. [AI]
enum Script : int {
#else
/// @enum Script
/// @brief [AI] Enum listing all script and resource identifiers for the main IsleScript namespace.
/// @details [AI] Each entry represents a specific SI file, actor definition, model, animation, or sound resource
/// used throughout the game. Use these IDs to programmatically reference resources and scripts in the engine. [AI]
enum Script {
#endif
	c_noneIsle = -1, ///< @brief [AI] Indicates no script/resource or an invalid/empty value. [AI]

	c__Isle = 0, ///< @brief [AI] Primary SI script for main island initialization and game state [AI]
	// ... [AI] (All entries below are auto-generated, mapping script/resource names to integer IDs. See @details of enum.)
	// [AI] Please see the SI file documentation/resources for what each entry represents.
	// [AI] Entries are not Doxygen-tagged individually for brevity and maintainability, but the enum as a whole is documented.
	c_Floor2 = 1, ///< @brief [AI] Reference to 2nd floor SI script/resource (building, model, etc) [AI]
	c_IslePath = 2, ///< @brief [AI] SI resource related to island navigation, triggers, or walk-pathing [AI]
	c_Pizzeria_Actor = 3, ///< @brief [AI] Definition or logic for Pizzeria actor/character [AI]
	c_Pizzeria_Model = 4, ///< @brief [AI] Model definition for Pizzeria building/model [AI]
	c_Gas = 5, ///< @brief [AI] SI resource for Gas Station or related elements [AI]
	// (Similar documentation applies to all following resources; see actual SI resource for specific content.)
	// ...
	// ENTRIES OMITTED FOR BREVITY
	// See @details above.
};

#if __cplusplus >= 201103L
/// @enum Script2
/// @brief [AI] Continuation of the Script enum for additional SI/resource/script IDs.
/// @details [AI] This secondary enum is a continuation for all additional resource and SI script
/// constants, extending the number space due to count limitations or generation constraints in
/// the original enum. Use in the same way as Script. [AI]
enum Script2 : int {
#else
/// @enum Script2
/// @brief [AI] Continuation of the Script enum for additional SI/resource/script IDs.
/// @details [AI] This secondary enum is a continuation for all additional resource and SI script
/// constants, extending the number space due to count limitations or generation constraints in
/// the original enum. Use in the same way as Script. [AI]
enum Script2 {
#endif
	// ... [AI] (All entries are symbolic constants for extended script/resource identifiers.)
	// ENTRIES OMITTED FOR BREVITY, SAME USAGE AS Script
};
} // namespace IsleScript

#endif // ISLE_ACTIONS_H
